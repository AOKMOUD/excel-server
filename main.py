import os
import re
import string
import pandas as pd
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, filters, \
    ContextTypes
from flask import Flask

app = Flask(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
file_path = r"\\192.168.1.5\interview\1–°–£–ü\–û–û–ò–†–ü\–ö–ë\spisokKnig.xlsx"
try:
    if os.path.exists(file_path):
        book_data = pd.read_excel(file_path)
        if "–ñ–∞–Ω—Ä" not in book_data.columns:
            book_data["–ñ–∞–Ω—Ä"] = ""
        print("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
    else:
        print("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        book_data = pd.DataFrame()
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Excel-—Ñ–∞–π–ª–∞: {e}")
    book_data = pd.DataFrame()

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤
unique_genres = sorted(
    book_data['–ñ–∞–Ω—Ä'].dropna().unique().tolist()) if not book_data.empty and "–ñ–∞–Ω—Ä" in book_data.columns else []


# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫)
async def show_main_menu(update: Update, context: CallbackContext) -> None:
    # ‚úÖ –û—á–∏—â–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()

    # ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å (–∫–Ω–æ–ø–∫–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞)
    if update.callback_query:
        message = update.callback_query.message
        await update.callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫–Ω–æ–ø–∫–∏
    else:
        message = update.message

    # ‚úÖ –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    try:
        await message.delete()
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

    # ‚úÖ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("üìö –£–∑–Ω–∞—Ç—å –æ –Ω–∞–ª–∏—á–∏–∏ –∫–Ω–∏–≥", callback_data="search_books")],
        [InlineKeyboardButton("üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="submit_request")]# –¢–µ–ø–µ—Ä—å —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞!
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ "–ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–Ω–æ–µ" –º–µ–Ω—é
    await message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø - –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—å –ö–ú! –Ø –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–∞—Ö –Ω–∞—à–µ–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ "
        "–∏–ª–∏ –ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
async def main_menu_callback(update: Update, context: CallbackContext) -> None:
    await show_main_menu(update, context)

# –ú–µ–Ω—é –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
async def show_search_criteria(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    keyboard = [
        [InlineKeyboardButton("üîç –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="search_by_title")],
        [InlineKeyboardButton("üìÇ –ü–æ –∂–∞–Ω—Ä—É", callback_data="search_by_genre")],
        [InlineKeyboardButton("‚úçÔ∏è –ü–æ –∞–≤—Ç–æ—Ä—É", callback_data="search_by_author")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("üîé *–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥–∏:*", reply_markup=reply_markup,
                                  parse_mode="Markdown")


# –°–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
async def show_genres(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    if unique_genres:
        keyboard = [[InlineKeyboardButton(f"üìñ {genre}", callback_data=f"genre_{i}")] for i, genre in
                    enumerate(unique_genres)]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üìö *–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:*", reply_markup=reply_markup, parse_mode="Markdown")
    else:
        await query.edit_message_text("‚ùå –ñ–∞–Ω—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")


# –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥ –ø–æ –∂–∞–Ω—Ä—É
async def show_books_in_genre(update: Update, context: CallbackContext, genre_index: int) -> None:
    query = update.callback_query
    genre = unique_genres[genre_index]
    books = book_data[book_data['–ñ–∞–Ω—Ä'] == genre]['–ù–∞–∑–≤–∞–Ω–∏–µ'].tolist()

    if books:
        context.user_data['book_list'] = books
        books_text = "\n".join([f"{i + 1}. üìñ *{book}*" for i, book in enumerate(books)])
        await query.message.reply_text(f"üìö *–ö–Ω–∏–≥–∏ –≤ –∂–∞–Ω—Ä–µ '{genre}':*\n\n{books_text}", parse_mode="Markdown")

        keyboard = [
            [InlineKeyboardButton("üìñ –û–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏", callback_data="book_description")],
            [InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä", callback_data="search_by_genre")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    else:
        await query.message.reply_text(f"‚ùå –í –∂–∞–Ω—Ä–µ *'{genre}'* –∫–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", parse_mode="Markdown")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –∫–Ω–∏–≥–∏ –∏ –≤—ã–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
async def handle_book_description(update: Update, context: CallbackContext) -> None:
    try:
        book_number = int(update.message.text.strip())
        if 'book_list' in context.user_data and 1 <= book_number <= len(context.user_data['book_list']):
            book_name = context.user_data['book_list'][book_number - 1]
            book_row = book_data[book_data['–ù–∞–∑–≤–∞–Ω–∏–µ'].str.lower() == book_name.lower()]
            if not book_row.empty:
                response = "üìò *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–Ω–∏–≥–µ:*\n\n"
                for column in book_row.columns:
                    if column != "–ù–∞–∑–≤–∞–Ω–∏–µ_–æ—á–∏—â–µ–Ω–Ω–æ–µ" and pd.notnull(book_row[column].values[0]):
                        value = str(book_row[column].values[0]).replace("_", "\\_")
                        response += f"*{column}:* {value}\n"
                await update.message.reply_text(response, parse_mode="Markdown")
            else:
                await update.message.reply_text("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ –∞–≤—Ç–æ—Ä—É"
async def handle_author_search(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    context.user_data['waiting_for_author_search'] = True
    await query.edit_message_text(text="–ù–∞–ø–∏—à–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∞–≤—Ç–æ—Ä–∞:")
    context.user_data.clear()

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
async def handle_callback(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == "search_by_title":
        context.user_data['waiting_for_search_by_title'] = True
        await query.edit_message_text(
            text='–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏'
        )
    elif query.data == "search_books":
        await show_search_criteria(update, context)
    elif query.data == "submit_request":
        context.user_data['waiting_for_request'] = True
        await query.edit_message_text(
            text="–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏, –∞–≤—Ç–æ—Ä–∞, –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: —Ñ–∞–º–∏–ª–∏—è, –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        )
    elif query.data == "search_by_genre":
        await show_genres(update, context)
    elif query.data == "main_menu":
        await show_main_menu(update, context)
    elif query.data == "book_description":
        context.user_data['waiting_for_book_description'] = True
        await query.edit_message_text(
            text='–ù–∞–ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä—É –∫–Ω–∏–≥–∏'
        )
        context.user_data['waiting_for_book_description'] = True
    elif query.data == "search_by_author":  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ –∞–≤—Ç–æ—Ä—É"
        context.user_data['waiting_for_author_search'] = True
        await query.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    elif query.data.startswith("genre_"):
        genre_index = int(query.data.replace("genre_", ""))
        await show_books_in_genre(update, context, genre_index)


async def handle_user_input(update: Update, context: CallbackContext) -> None:
    if context.user_data.get('waiting_for_search_by_title', False):
        await handle_search_by_title(update, context)
    elif context.user_data.get('waiting_for_request', False):
        await handle_request_message(update, context)
    elif context.user_data.get('waiting_for_book_description', False):
        await handle_book_description(update, context)
    elif context.user_data.get('waiting_for_author_search', False):
        await handle_author_search_input(update, context)
    else:
        await show_main_menu(update, context)


def clean_string(s):
    if isinstance(s, str):
        s = s.lower().strip()  # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        s = re.sub(r'\s+', ' ', s)  # –ó–∞–º–µ–Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –Ω–∞ –æ–¥–∏–Ω
        s = s.translate(str.maketrans('', '', string.punctuation))  # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–Ω–∞–∫–æ–≤ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
        return s
    return s


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
async def handle_search_by_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    book_name = update.message.text.strip().lower()
    context.user_data['waiting_for_search_by_title'] = False

    required_columns = ['–ê–≤—Ç–æ—Ä', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–û–ø–∏—Å–∞–Ω–∏–µ', '–ñ–∞–Ω—Ä', '–°—Ç–∞—Ç—É—Å']
    if all(column in book_data.columns for column in required_columns):
        try:
            if '–ù–∞–∑–≤–∞–Ω–∏–µ_–æ—á–∏—â–µ–Ω–Ω–æ–µ' not in book_data.columns:
                book_data['–ù–∞–∑–≤–∞–Ω–∏–µ_–æ—á–∏—â–µ–Ω–Ω–æ–µ'] = book_data['–ù–∞–∑–≤–∞–Ω–∏–µ'].apply(clean_string)

            cleaned_book_name = clean_string(book_name)
            book_row = book_data[book_data['–ù–∞–∑–≤–∞–Ω–∏–µ_–æ—á–∏—â–µ–Ω–Ω–æ–µ'].str.contains(cleaned_book_name, na=False)]

            if not book_row.empty:
                response = "üìö *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥–∞—Ö:*\n\n"
                for _, row in book_row.iterrows():
                    for column in required_columns:
                        value = str(row[column]).replace("-", "\\-").replace(".", "\\.").replace("(", "\\(").replace(
                            ")", "\\)").replace("!", "\\!")
                        if pd.notnull(value):
                            response += f"*{column}:* {value}\n"
                    response += "\n"

                await update.message.reply_text(response, parse_mode="MarkdownV2")

                # –ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                keyboard = [
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
            else:
                keyboard = [[InlineKeyboardButton("üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="submit_request")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(
                    text=f"‚ùå –ö–Ω–∏–≥–∞ '{update.message.text.strip()}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ —ç—Ç–æ–π –∫–Ω–∏–≥–∏.",
                    reply_markup=reply_markup
                )
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    else:
        missing_columns = [col for col in required_columns if col not in book_data.columns]
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –í Excel-—Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–æ–ª–±—Ü—ã: {', '.join(missing_columns)}.")
        # ‚úÖ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∞
    context.user_data.pop('waiting_for_search_by_title', None)
    context.user_data.clear()


# ‚úÖ –ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
async def handle_author_search_input(update: Update, context: CallbackContext) -> None:
    author_name = update.message.text.strip().lower()

    required_columns = ['–ê–≤—Ç–æ—Ä', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–û–ø–∏—Å–∞–Ω–∏–µ', '–ñ–∞–Ω—Ä', '–°—Ç–∞—Ç—É—Å']
    if all(column in book_data.columns for column in required_columns):
        try:
            if '–ê–≤—Ç–æ—Ä_–æ—á–∏—â–µ–Ω–Ω—ã–π' not in book_data.columns:
                book_data['–ê–≤—Ç–æ—Ä_–æ—á–∏—â–µ–Ω–Ω—ã–π'] = book_data['–ê–≤—Ç–æ—Ä'].apply(clean_string)

            cleaned_author_name = clean_string(author_name)
            books_by_author = book_data[book_data['–ê–≤—Ç–æ—Ä_–æ—á–∏—â–µ–Ω–Ω—ã–π'].str.contains(cleaned_author_name, na=False)]

            if not books_by_author.empty:
                response = "üìö *–ö–Ω–∏–≥–∏ —ç—Ç–æ–≥–æ –∞–≤—Ç–æ—Ä–∞:*\n\n"
                for _, row in books_by_author.iterrows():
                    book_title = row['–ù–∞–∑–≤–∞–Ω–∏–µ'].replace("-", "\\-").replace(".", "\\.").replace("(", "\\(").replace(
                        ")", "\\)").replace("!", "\\!").replace("*", "\\*")
                    book_genre = row['–ñ–∞–Ω—Ä'].replace("-", "\\-").replace(".", "\\.").replace("(", "\\(").replace(")",
                                                                                                                 "\\)").replace(
                        "!", "\\!").replace("*", "\\*")

                    response += f"üìñ *–ù–∞–∑–≤–∞–Ω–∏–µ:* {book_title}\nüìÇ *–ñ–∞–Ω—Ä:* {book_genre}\n\n"

                await update.message.reply_text(response, parse_mode="MarkdownV2")

                # –ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
                keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
            else:
                await update.message.reply_text(f"‚ùå –ö–Ω–∏–≥–∏ —Å –∞–≤—Ç–æ—Ä–æ–º '{author_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                                                parse_mode="MarkdownV2")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–≤—Ç–æ—Ä–∞: {str(e)}", parse_mode="MarkdownV2")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã.", parse_mode="MarkdownV2")

    # ‚úÖ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∞
    context.user_data.clear()


# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π)
async def handle_request_message(update: Update, context: CallbackContext) -> None:
    user_message = update.message.text
    recipient_chat_id = "7769340488"  # –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID —á–∞—Ç–∞

    await context.bot.send_message(chat_id=recipient_chat_id, text=f"üì¨ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:*\n{user_message}",
                                   parse_mode="Markdown")
    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")

    # ‚úÖ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–∫–∏
    context.user_data.pop('waiting_for_request', None)
    context.user_data.clear()



# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –≤ MarkdownV2
def escape_markdown_v2(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2."""
    special_chars = r'\_*[]()~`>#+-=|{}.!'
    return re.sub(r'([{}])'.format(re.escape(special_chars)), r'\\\1', text)

async def handle_book_description(update: Update, context: CallbackContext) -> None:
    try:
        book_number = int(update.message.text.strip())  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        if 'book_list' in context.user_data and 1 <= book_number <= len(context.user_data['book_list']):
            book_name = context.user_data['book_list'][book_number - 1]
            book_row = book_data[book_data['–ù–∞–∑–≤–∞–Ω–∏–µ'].str.lower() == book_name.lower()]

            if not book_row.empty:
                response = "üìò *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–Ω–∏–≥–µ:*\n\n"
                excluded_columns = ["–ù–∞–∑–≤–∞–Ω–∏–µ_–æ—á–∏—â–µ–Ω–Ω–æ–µ", "–ê–≤—Ç–æ—Ä_–æ—á–∏—â–µ–Ω–Ω—ã–π"]  # ‚ùå –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã

                for column in book_row.columns:
                    if column not in excluded_columns and pd.notnull(book_row[column].values[0]):
                        column_name = escape_markdown_v2(column)
                        value = escape_markdown_v2(str(book_row[column].values[0]))
                        response += f"*{column_name}:* {value}\n"

                await update.message.reply_text(response, parse_mode="MarkdownV2")

                # –ö–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –∏ "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä"
                keyboard = [
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
                    [InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä", callback_data="search_by_genre")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
            else:
                await update.message.reply_text(f"‚ùå –ö–Ω–∏–≥–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{escape_markdown_v2(book_name)}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="MarkdownV2")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode="MarkdownV2")
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.", parse_mode="MarkdownV2")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {escape_markdown_v2(str(e))}", parse_mode="MarkdownV2")

    # ‚úÖ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥–∏
    context.user_data.clear()

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    telegram_token = "8062121167:AAFAXk-4dQ_w6nJWS9wTxwWgAYai-VFArYw"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    app = Application.builder().token(telegram_token).build()

    app.add_handler(CommandHandler("start", show_main_menu))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_input, handle_book_description))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
port = int(os.environ.get("PORT", 5000))  # Railway –ø–µ—Ä–µ–¥–∞–µ—Ç –ø–æ—Ä—Ç
app.run(host="0.0.0.0", port=port)
















